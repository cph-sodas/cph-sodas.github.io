{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the SODAS Documentation","text":"<p>Find relevant documentation and information about SODAS here.</p>"},{"location":"server/","title":"Server","text":"<p>Welcome to the SODAS server.</p> <p>Before you start using the server, please make sure that you read all the three pages in this part of the documentation:</p> <ol> <li>How to access the server</li> <li>How to setup a project and your developer environment</li> <li>How to use the computational resources through Slurm</li> </ol> <p>For tips &amp; tricks for working with the server see here.</p>"},{"location":"server/access/","title":"Access","text":"<p>In order to access the server, you need to contact TBD with your basic information and SODAS affiliation, and they will setup up an account for you.</p>"},{"location":"server/access/#connecting-to-the-server","title":"Connecting to the server","text":"<p>First of all, you need to be connected to UCPH's network through a VPN. See the guides on the intranet. Our friends at DIKU also have a guide for using a VPN with UCPH's network for linux and mac users.</p> <p>You connect to the server using SSH. See tips on SSH here. An SSH connection to the server can be established either through your terminal of choice or e.g. VSCode.</p>"},{"location":"server/access/#terminal","title":"Terminal","text":""},{"location":"server/access/#ssh","title":"SSH","text":"<pre><code>ssh -L &lt;local-port&gt;:localhost:&lt;remote-port&gt; &lt;username&gt;@sodashead01fl.unicph.domain\n</code></pre> <p>To connect locally to the server on port 8000 with the user abc123, do:</p> <pre><code>ssh -L 8000:localhost:8000 abc123@sodashead01fl.unicph.domain\n</code></pre>"},{"location":"server/access/#transferring-files","title":"Transferring files","text":""},{"location":"server/access/#transfer-from-local-to-server","title":"Transfer from local to server","text":"<pre><code>scp /path/to/file &lt;username&gt;@sodashead01fl.unicph.domain:/path/to/destination\n</code></pre> <p>To move a text file in documents to your H-drive which is mounted on the server by default, do:</p> <pre><code>scp /documents/test.txt abc123@sodashead01fl.unicph.doman:/ucph/hdir\n</code></pre>"},{"location":"server/access/#transfer-file-from-server-to-local","title":"Transfer file from server to local","text":"<pre><code>scp &lt;username&gt;@sodashead01fl.unicph.domain:/path/to/file /path/to/destination\n</code></pre> <p>To move a text file from the H-drive on the server to your local documents folder, do:</p> <pre><code>scp abc123@sodashead01fl.unicph.doman:/ucph/hdir/test.txt /documents\n</code></pre>"},{"location":"server/access/#vscode","title":"VSCode","text":"<p>You can access the server through VSCode by installing the Remote - SSH extension. Follow the instructions in the documentation to connect to the server.</p> <p>Then, when connected, install the python and juyter extensions on the remote.</p> <p>To make the compute resources from slurm available in vscode, see under usage.</p>"},{"location":"server/access/#management","title":"Management","text":"<p>Display unicph ID information</p> <pre><code>kuid &lt;username&gt;\n</code></pre> <p>Check user access</p> <pre><code>id &lt;username&gt; | tr \",\" \"\\n\" | grep srv-sodas\n</code></pre>"},{"location":"server/setup/","title":"Setup","text":"<p>The setup guide walks you through the process of setting up your developer environment on the SODAS server.</p>"},{"location":"server/setup/#projects","title":"Projects","text":""},{"location":"server/setup/#storage","title":"Storage","text":""},{"location":"server/setup/#shared-cache","title":"Shared cache","text":""},{"location":"server/setup/#configuration","title":"Configuration","text":"<p>Tip</p> <p>Remeber to source your <code>.bashrc</code> after adding stuff to it. You can do this by <pre><code>source ~/.bashrc\n</code></pre></p>"},{"location":"server/setup/#install-custom-software","title":"Install custom software","text":""},{"location":"server/setup/#uv","title":"uv","text":"<p>Install <code>uv</code>:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>There are two different strategies for managing your virtual environments.</p> <p>You can either do it by creating named environments in the <code>~/.virtualenvs/</code> folder, or by creating them locally in a <code>.venv</code> folder in your project.</p>"},{"location":"server/setup/#named-environments","title":"Named environments","text":"<p>If you prefer named virtual environments, you can store them in <code>~/.virtualenvs/</code>.</p> <pre><code>mkdir ~/.virtualenvs\n</code></pre> <p>Here you can create new named virtual environments</p> <pre><code>cd ~/.virtualenvs\nuv venv my-project\n</code></pre>"},{"location":"server/setup/#local-environments","title":"Local environments","text":"<p>To make local environments work on the projects folders (which are network drives), you must change a default setting by running</p> <pre><code>echo \"export UV_LINK_MODE=symlink\" &gt;&gt; ~/.bashrc\n</code></pre> <p>Then, in your projects app folder you can run</p> <pre><code>uv venv\n</code></pre> <p>which will create a local environment in the <code>.venv</code> folder.</p>"},{"location":"server/setup/#using-your-environments","title":"Using your environments","text":"<p>First you must activate your environment.</p> <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>!!! tip\n\n    Add a function to your to easily activate virtual environments from anywhere on the server:\n\n    ```bash\n    echo 'function activate() { if [ -n \"$1\" ]; then source ~/.virtualenvs/\"$1\"/bin/activate; else source ./.venv/bin/activate; fi; }' &gt;&gt; ~/.bashrc\n    ```\n\n    This function will activate the virtual environment in the current directory, or from the name of the virtual environment.\n\nTBD: (should these be stored en `people/` or `apps/`).\n\n```bash\nuv init\n</code></pre> <p>This will create some boiler plate, which will allow you to take advantage of uv's dependency management.</p> <p>Then, to add a project dependency, you can run:</p> <pre><code>uv add matplotlib\n</code></pre> <p>If you later found it it isn't needed, you can remove it with:</p> <pre><code>uv remove matplotlib\n</code></pre>"},{"location":"server/setup/#jupyterlab","title":"JupyterLab","text":"<p>Warning</p> <p>The following steps do not fully work, since <code>uv</code> havn't added --include-deps flag yet</p> <p>To install jupyterlab system-wide, we can run:</p> <pre><code>uv tool install jupyterlab\n</code></pre> <pre><code>echo \"alias jlab=\\\"jupyter-lab --port=8880 --ip=10.84.10.216 --no-browser\\\"\" &gt;&gt; ~/.bashrc\necho \"alias jadd=\\\"python -m ipykernel install --user --display-name \\${PWD} --name \\${PWD##*/}\\\"\" &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"server/setup/#zsh","title":"zsh","text":"<p>In this step of the guide, we will take you throw setting up zsh as your default shell, and installing oh-my-zsh</p> <p>Warning</p> <p>After setting up zsh this way installing oh-my-zsh throws some errors, probably not the right way. Maybe try installing zsh from source</p> <p>Make sure the necessary directories exist:</p> <pre><code>mkdir -p ~/.local/bin/\n</code></pre> <p>create a symlink to the zsh already installed</p> <pre><code>ln -s /opt/softare/zsh/5.9/bin/zsh ~/.local/bin/zsh\n</code></pre>"},{"location":"server/setup/#environment-variables","title":"Environment Variables","text":""},{"location":"server/setup/#docker","title":"Docker","text":""},{"location":"server/setup/#python-dependency-management","title":"Python dependency management","text":""},{"location":"server/setup/#utilities","title":"Utilities","text":""},{"location":"server/setup/#shell","title":"Shell","text":""},{"location":"server/setup/#github","title":"Github","text":""},{"location":"server/setup/#generate-ssh-key","title":"Generate SSH key","text":"<p>Follow the guide at GitHub.</p>"},{"location":"server/setup/#ssh-config","title":"SSH Config","text":"<p>Create a config file at <code>~/.ssh/config</code> and add the following lines:</p> <pre><code>Host github.com\n    HostName ssh.github.com\n    PreferredAuthentications publickey\n    IdentityFile ~/.ssh/id_ed25519\n    Port 443\n</code></pre>"},{"location":"server/tips/","title":"Tips","text":"<p>In general, reading the official documentation of all the tools you use in data science and on the computer is underrated. Would you ever use a new tool outdoors without reading its manual?</p> <p>Here, we list different tips and tricks for the most common tools encountered when using the SODAS server and on establishing a nice workflow on the server in general. In my experience (jsr-p) it always pays off in the long run to spend some time (minutes even) reading the documentation on the tools that I use.</p>"},{"location":"server/tips/#ssh","title":"SSH","text":"<ul> <li>Lecture note from MIT missing semester course on remote machines (and SSH)<ul> <li>Nice explanation of ssh, port forwarding and ssh configuration<ul> <li>Highly recommended to read the other parts of the lecture notes as well!</li> </ul> </li> </ul> </li> </ul>"},{"location":"server/tips/#windows","title":"Windows","text":"<p>You can ssh from Windows Terminal.</p>"},{"location":"server/tips/#tmux","title":"tmux","text":"<ul> <li>Lecture note from MIT missing semester   course   on terminal multiplexers (of which tmux is an example)</li> <li>Getting started   tmux documentation</li> <li>The tao of tmux</li> </ul>"},{"location":"server/tips/#finding-help-for-different-commands","title":"finding help for different commands","text":""},{"location":"server/tips/#help-flag","title":"help flag","text":"<p>To find help for commands on a Linux server, there are several options available. A quick way to get an overview of a command is to use the <code>-h</code> or <code>--help</code> flags, which provide brief explanations. E.g. for the <code>ls</code> command:</p> <pre><code>[abc123@sodashead01fl ~]$ ls --help\nUsage: ls [OPTION]... [FILE]...\nList information about the FILEs (the current directory by default).\nSort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n\nMandatory arguments to long options are mandatory for short options too.\n  -a, --all                  do not ignore entries starting with .\n  -A, --almost-all           do not list implied . and ..\n      --author               with -l, print the author of each file\n  -b, --escape               print C-style escapes for nongraphic characters\n      --block-size=SIZE      with -l, scale sizes by SIZE when printing them;\n                               e.g., '--block-size=M'; see SIZE format below\n  -B, --ignore-backups       do not list implied entries ending with ~\n  -c                         with -lt: sort by, and show, ctime (time of last\n                               modification of file status information);\n                               with -l: show ctime and sort by name;\n                               otherwise: sort by ctime, newest first\n  -C                         list entries by columns\n# ... Rest omitted for brievity\n</code></pre>"},{"location":"server/tips/#man-pages","title":"man pages","text":"<p>For more detailed information, you can use the <code>man</code> command (short for \"manual\"), which displays a comprehensive manual page, including command behaviors and flags. Even third-party commands often have manpages if developers include them. E.g. typing <code>man tmux</code> will open the man page for tmux in your manpager of choice (less pr default; you go up and down by pressing <code>j</code> and <code>k</code>):</p> <pre><code>TMUX(1)                   BSD General Commands Manual                  TMUX(1)\n\nNAME\n     tmux \u2014 terminal multiplexer\n\nSYNOPSIS\n     tmux [-2CluvV] [-c shell-command] [-f file] [-L socket-name]\n          [-S socket-path] [command [flags]]\n\nDESCRIPTION\n     tmux is a terminal multiplexer: it enables a number of terminals to be\n     created, accessed, and controlled from a single screen.  tmux may be\n     detached from a screen and continue running in the background, then later\n     reattached.\n\n# ... Rest omitted for brievity\n</code></pre> <p>Try for instance navigating to the DEFAULT KEY BINDINGS section of the tmux man page.</p>"},{"location":"server/tips/#tldr","title":"tldr","text":"<p>If manpages are too detailed, TLDR pages offer simplified examples and common use cases, making them a great complementary resource. See the tldr docs.</p>"},{"location":"server/usage/","title":"Usage","text":"<p>All usage of computer resources is manged through the Slurm<sup>1</sup> Workload Manager.</p>"},{"location":"server/usage/#modules","title":"Modules","text":""},{"location":"server/usage/#slurm","title":"Slurm","text":"<p>Slurm is a job scheduler and resource manager for the compute resources available.</p>"},{"location":"server/usage/#status","title":"Status","text":"<p>To see the attached resources, you can run the following command:</p> <pre><code>sinfo -N -l\n</code></pre> <p>To see the jobs that are currently running, you can run the following command:</p> <pre><code>squeue\n</code></pre> <p>for a specific user:</p> <pre><code>squeue -u &lt;username&gt;\n</code></pre>"},{"location":"server/usage/#submitting-jobs","title":"Submitting jobs","text":""},{"location":"server/usage/#batch-jobs","title":"Batch jobs","text":"<pre><code>#!/bin/bash\n#SBATCH --chdir=/projects/main_compute-AUDIT/people/abc123\n#SBATCH --job-name alphafoldtestjobname\n#SBATCH --mem=50G\n#SBATCH --ntasks=1                # 1 tasks\n#SBATCH --cpus-per-task=1         # number of cores per task\n#SBATCH --nodes=1                 # number of nodes\n#SBATCH --mail-type=begin         # send email when job begins\n#SBATCH --mail-type=end           # send email when job ends\n#SBATCH --mail-user=abc123@ku.dk\n#SBATCH --gres=gpu:1\n\n# Load modules\nmodule load miniconda/4.10.4\nconda activate alphafold\n\n# Run the script\ncd /projects/main_compute-AUDIT/data/alphafold\nbash run_alphafold.sh -d /projects/testproject1/data/genetic_databases/ -o /projects/testproject1/people/btj820/ -m model_1 -f example/query.fasta -t 2020-05-14\n</code></pre> <pre><code>sbatch &lt;script&gt;.sh\n</code></pre> <ol> <li><code>--mail-type=type</code> notify on state change: <code>BEGIN</code>, <code>END</code>, <code>FAIL</code> or <code>ALL</code></li> </ol>"},{"location":"server/usage/#interactive-jobs","title":"Interactive jobs","text":"<p>To start a simple interactive shell with 2 CPU cores, 5GB ram, 1 v100 GPU you can run the following command:</p> <p>Tip</p> <p>If copy pasting doesn't work for the multi line code snippets, try switching between selecting the text and using the copy button in the top right corner</p> <pre><code>srun -w sodasgpun01fl --partition=gpuqueue \\ #(1)!\n    --ntasks-per-node=2 \\ #(2)!\n    --mem=5GB \\ #(3)!\n    --gres=gpu:v100:1 \\ #(4)!\n    --time=240 \\ #(5)!\n    --pty /bin/bash -i #(6)!\n</code></pre> <ol> <li>Standard node and partition configuration</li> <li>Number of CPU cores</li> <li>Amount of memory (RAM)</li> <li>Number of GPUs</li> <li>Maximum time to run the task in minutes</li> <li>Run task in pseudo terminal</li> </ol> <p>This will start a new shell session with the allocated resources. This means that exiting the shell (e.g. when logging out of the server) will release the resources. To prevent this, you can start a persistent session with tmux.</p>"},{"location":"server/usage/#jupyter-notebook","title":"Jupyter Notebook","text":"<p>To start a Jupyter Notebook, you need to first allocate resources on the server:</p> <pre><code>srun -w sodasgpun01fl --partition=gpuqueue \\\n  --ntasks-per-node=2 \\\n  --mem=5GB \\\n  --pty /bin/bash -i\n</code></pre> <p>Then, load the Jupyter Notebook module:</p> <pre><code>module load jupyter-notebook/6.5.4\n</code></pre> <p>Now, you can start the notebook server:</p> <pre><code>jupyter notebook --port=8880 --ip=10.84.10.216 --no-browser\n</code></pre> <p>Then copy the generated link and paste it in your local computer's browsers.</p> <p>I.e: <code>http://10.84.10.216:8800/?token=abcd1234...</code></p>"},{"location":"server/usage/#vscode","title":"VSCode","text":"<p>In order to make the resources from slurm available to VSCode, follow the steps above and start a jupyter session.</p> <p>Then, in VSCode, when you open a Notebook Ctrl+Shift+P and search for <code>Notebook: Select Notebook Kernel</code>. If a kernel is already suggested, click <code>Select another kernel...</code> then <code>Existing Jupyter Server...</code> and copy the link with the token from above into the field.</p>"},{"location":"server/usage/#jupyter-kernels-and-virtual-environments","title":"Jupyter Kernels and Virtual Environments","text":"<p>To register a virtual environment with Jupyter, you can run the following command, from within your environment (that is, after activating it and making sure that ipykernel (<code>uv pip install ipykernel</code>) is installed).</p> <pre><code>python -m ipykernel install --user\n</code></pre>"},{"location":"server/usage/#persistent-sessions","title":"Persistent sessions","text":"<p>Use tmux to create and manage persistent sessions on the server.</p> <p>Start a new tmux session</p> <pre><code>tmux new -s &lt;session-name&gt;\n</code></pre> <p>List tmux sessions</p> <pre><code>tmux ls\n</code></pre> <p>Attach tmux session</p> <pre><code>tmux a -t &lt;session name&gt;\n</code></pre> <p>Detach (when you are inside) the session from tmux, leaving everything running in the background</p> <p>Ctrl+B D</p>"},{"location":"server/usage/#resources","title":"Resources","text":"<p>The UCPH guide to HPC systems</p> <p>Five part  video series  introducing Slurm</p> <p>The official slurm cheatsheet</p> <p>TMUX cheatsheet</p> <ol> <li> <p>Simple Linux Utility for Resource Management.\u00a0\u21a9</p> </li> </ol>"}]}